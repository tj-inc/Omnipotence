

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue May 10 21:54:38 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0014                     	;# 
    38  0015                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001B                     	;# 
    46  001B                     	;# 
    47  001C                     	;# 
    48  001D                     	;# 
    49  001E                     	;# 
    50  001F                     	;# 
    51  0081                     	;# 
    52  0085                     	;# 
    53  0086                     	;# 
    54  0087                     	;# 
    55  0088                     	;# 
    56  0089                     	;# 
    57  008C                     	;# 
    58  008D                     	;# 
    59  008E                     	;# 
    60  008F                     	;# 
    61  0090                     	;# 
    62  0091                     	;# 
    63  0092                     	;# 
    64  0093                     	;# 
    65  0093                     	;# 
    66  0093                     	;# 
    67  0094                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  0105                     	;# 
    80  0107                     	;# 
    81  0108                     	;# 
    82  0109                     	;# 
    83  010C                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  010E                     	;# 
    87  010F                     	;# 
    88  0185                     	;# 
    89  0187                     	;# 
    90  0188                     	;# 
    91  0189                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94                           
    95                           	psect	bitnvCOMMON
    96  03C8                     __pbitnvCOMMON:	
    97  03C8                     _last_RC_data:	
    98  03C8                     	ds	1
    99                           
   100                           	psect	nvBANK0
   101  0049                     __pnvBANK0:	
   102  0049                     _last_RC_time:	
   103  0049                     	ds	2
   104  000E                     _TMR1	set	14
   105  005F                     _GIE	set	95
   106  0032                     _RB2	set	50
   107  005B                     _RBIE	set	91
   108  0058                     _RBIF	set	88
   109  0084                     _T1CKPS0	set	132
   110  0085                     _T1CKPS1	set	133
   111  0081                     _TMR1CS	set	129
   112  0086                     _TMR1GE	set	134
   113  0080                     _TMR1ON	set	128
   114  0085                     _TRISA	set	133
   115  04B2                     _IOCB2	set	1202
   116  0432                     _TRISB2	set	1074
   117  040F                     _nRBPU	set	1039
   118  0188                     _ANSEL	set	392
   119  0189                     _ANSELH	set	393
   120  0C48                     _ANS8	set	3144
   121                           
   122                           ; #config settings
   123  0000                     
   124                           	psect	cinit
   125  0015                     start_initialization:	
   126  0015                     __initialization:	
   127                           
   128                           ; Clear objects allocated to BITCOMMON
   129  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   130                           
   131                           ; Clear objects allocated to BANK0
   132  0016  1383               	bcf	3,7	;select IRP bank0
   133  0017  3020               	movlw	low __pbssBANK0
   134  0018  0084               	movwf	4
   135  0019  3045               	movlw	low (__pbssBANK0+37)
   136  001A  120A  118A  21A5   	fcall	clear_ram0
   137  001D                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  001D                     __end_of__initialization:	
   141  001D  0183               	clrf	3
   142  001E  120A  118A  2821   	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bitbssCOMMON
   145  03C0                     __pbitbssCOMMON:	
   146  03C0                     _RC_data_ready:	
   147  03C0                     	ds	1
   148  03C1                     _mode:	
   149  03C1                     	ds	1
   150                           
   151                           	psect	bssBANK0
   152  0020                     __pbssBANK0:	
   153  0020                     _RC_data:	
   154  0020                     	ds	33
   155  0041                     _last_critical_RC_time:	
   156  0041                     	ds	2
   157  0043                     _RC_State:	
   158  0043                     	ds	1
   159  0044                     _RC_index:	
   160  0044                     	ds	1
   161                           
   162                           	psect	clrtext
   163  01A5                     clear_ram0:	
   164                           ;	Called with FSR containing the base address, and
   165                           ;	W with the last address+1
   166                           
   167  01A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   168  01A6                     clrloop0:	
   169  01A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   170  01A7  0A84               	incf	4,f	;increment pointer
   171  01A8  0604               	xorwf	4,w	;XOR with final address
   172  01A9  1903               	btfsc	3,2	;have we reached the end yet?
   173  01AA  3400               	retlw	0	;all done for this memory range, return
   174  01AB  0604               	xorwf	4,w	;XOR again to restore value
   175  01AC  29A6               	goto	clrloop0	;do the next byte
   176                           
   177                           	psect	cstackCOMMON
   178  0070                     __pcstackCOMMON:	
   179  0070                     ?_main:	
   180  0070                     ?_interrupt_handler:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ??_interrupt_handler:	
   184                           ; 1 bytes @ 0x0
   185                           
   186                           
   187                           ; 1 bytes @ 0x0
   188  0070                     	ds	4
   189  0074                     ??_main:	
   190                           
   191                           ; 1 bytes @ 0x4
   192  0074                     	ds	4
   193                           
   194                           	psect	cstackBANK0
   195  0045                     __pcstackBANK0:	
   196  0045                     main@last_critical_difference:	
   197                           
   198                           ; 2 bytes @ 0x0
   199  0045                     	ds	2
   200  0047                     main@last_RC_time_backup:	
   201                           
   202                           ; 2 bytes @ 0x2
   203  0047                     	ds	2
   204                           
   205                           	psect	maintext
   206  0021                     __pmaintext:	
   207 ;;
   208 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   209 ;;
   210 ;; *************** function _main *****************
   211 ;; Defined at:
   212 ;;		line 59 in file "base_main.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;  last_RC_time    2    2[BANK0 ] unsigned int 
   217 ;;  last_critica    2    0[BANK0 ] unsigned int 
   218 ;; Return value:  Size  Location     Type
   219 ;;                  1    wreg      void 
   220 ;; Registers used:
   221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   222 ;; Tracked objects:
   223 ;;		On entry : B00/0
   224 ;;		On exit  : 0/0
   225 ;;		Unchanged: 0/0
   226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   227 ;;      Params:         0       0       0       0       0
   228 ;;      Locals:         0       4       0       0       0
   229 ;;      Temps:          4       0       0       0       0
   230 ;;      Totals:         4       4       0       0       0
   231 ;;Total ram usage:        8 bytes
   232 ;; Hardware stack levels required when called:    1
   233 ;; This function calls:
   234 ;;		Nothing
   235 ;; This function is called by:
   236 ;;		Startup code after reset
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           
   241                           ;psect for function _main
   242  0021                     _main:	
   243                           
   244                           ;base_main.c: 61: TRISA = 0;
   245                           
   246                           ;incstack = 0
   247                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1]
   248  0021  1683               	bsf	3,5	;RP0=1, select bank1
   249  0022  1303               	bcf	3,6	;RP1=0, select bank1
   250  0023  0185               	clrf	5	;volatile
   251                           
   252                           ;base_main.c: 62: ANSEL = 0;
   253  0024  1683               	bsf	3,5	;RP0=1, select bank3
   254  0025  1703               	bsf	3,6	;RP1=1, select bank3
   255  0026  0188               	clrf	8	;volatile
   256                           
   257                           ;base_main.c: 63: ANSELH = 0;
   258  0027  0189               	clrf	9	;volatile
   259                           
   260                           ;base_main.c: 66: TRISB2 = 1;
   261  0028  1683               	bsf	3,5	;RP0=1, select bank1
   262  0029  1303               	bcf	3,6	;RP1=0, select bank1
   263  002A  1506               	bsf	6,2	;volatile
   264                           
   265                           ;base_main.c: 67: ANS8 = 0;
   266  002B  1683               	bsf	3,5	;RP0=1, select bank3
   267  002C  1703               	bsf	3,6	;RP1=1, select bank3
   268  002D  1009               	bcf	9,0	;volatile
   269                           
   270                           ;base_main.c: 68: nRBPU = 0;
   271  002E  1683               	bsf	3,5	;RP0=1, select bank1
   272  002F  1303               	bcf	3,6	;RP1=0, select bank1
   273  0030  1381               	bcf	1,7	;volatile
   274                           
   275                           ;base_main.c: 69: IOCB2 = 1;
   276  0031  1516               	bsf	22,2	;volatile
   277                           
   278                           ;base_main.c: 70: last_RC_data = RB2;
   279  0032  1079               	bcf	_last_RC_data/(0+8),_last_RC_data& (0+7)
   280  0033  1283               	bcf	3,5	;RP0=0, select bank0
   281  0034  1303               	bcf	3,6	;RP1=0, select bank0
   282  0035  1906               	btfsc	6,2	;volatile
   283  0036  1479               	bsf	_last_RC_data/(0+8),_last_RC_data& (0+7)
   284                           
   285                           ;base_main.c: 71: RBIF = 0;
   286  0037  100B               	bcf	11,0	;volatile
   287                           
   288                           ;base_main.c: 72: RBIE = 1;
   289  0038  158B               	bsf	11,3	;volatile
   290                           
   291                           ;base_main.c: 75: TMR1GE = 0; TMR1ON = 1;
   292  0039  1283               	bcf	3,5	;RP0=0, select bank0
   293  003A  1303               	bcf	3,6	;RP1=0, select bank0
   294  003B  1310               	bcf	16,6	;volatile
   295  003C  1410               	bsf	16,0	;volatile
   296                           
   297                           ;base_main.c: 76: TMR1CS = 0;
   298  003D  1090               	bcf	16,1	;volatile
   299                           
   300                           ;base_main.c: 77: T1CKPS1 = 1; T1CKPS0 = 1;
   301  003E  1690               	bsf	16,5	;volatile
   302  003F  1610               	bsf	16,4	;volatile
   303                           
   304                           ;base_main.c: 86: last_RC_time = TMR1;
   305  0040  080F               	movf	15,w	;volatile
   306  0041  00CA               	movwf	_last_RC_time+1
   307  0042  080E               	movf	14,w	;volatile
   308  0043  00C9               	movwf	_last_RC_time
   309                           
   310                           ;base_main.c: 88: GIE = 1;
   311  0044  178B               	bsf	11,7	;volatile
   312  0045  2954               	goto	l715
   313  0046                     l717:	
   314                           
   315                           ;base_main.c: 109: RC_State = RC_RESET;
   316  0046  1283               	bcf	3,5	;RP0=0, select bank0
   317  0047  1303               	bcf	3,6	;RP1=0, select bank0
   318  0048  01C3               	clrf	_RC_State
   319                           
   320                           ;base_main.c: 110: RC_index = 0;
   321  0049  01C4               	clrf	_RC_index
   322  004A  28EF               	goto	l773
   323  004B                     l57:	
   324                           ;base_main.c: 115: case RC_RESET:
   325                           
   326                           ;base_main.c: 114: switch (RC_State) {
   327                           
   328                           ;base_main.c: 112: } else {
   329                           
   330                           ;base_main.c: 111: RC_data_ready = 0;
   331                           
   332                           
   333                           ;base_main.c: 116: if (last_RC_data == 0) {
   334  004B  1879               	btfsc	_last_RC_data/(0+8),_last_RC_data& (0+7)
   335  004C  2954               	goto	l715
   336                           
   337                           ;base_main.c: 117: last_critical_RC_time = last_RC_time;
   338  004D  084A               	movf	_last_RC_time+1,w
   339  004E  00C2               	movwf	_last_critical_RC_time+1
   340  004F  0849               	movf	_last_RC_time,w
   341  0050  00C1               	movwf	_last_critical_RC_time
   342                           
   343                           ;base_main.c: 118: RC_State = RC_START_FALL;
   344  0051  01C3               	clrf	_RC_State
   345  0052  0AC3               	incf	_RC_State,f
   346                           
   347                           ;base_main.c: 119: }
   348                           ;base_main.c: 120: break;
   349  0053  2954               	goto	l715
   350  0054                     l60:	
   351                           ;base_main.c: 121: case RC_START_FALL:
   352                           
   353                           
   354                           ;base_main.c: 122: if (last_RC_data == 1) {
   355  0054  1C79               	btfss	_last_RC_data/(0+8),_last_RC_data& (0+7)
   356  0055  2954               	goto	l715
   357                           
   358                           ;base_main.c: 123: last_RC_time_backup = last_RC_time;
   359  0056  084A               	movf	_last_RC_time+1,w
   360  0057  00C8               	movwf	main@last_RC_time_backup+1
   361  0058  0849               	movf	_last_RC_time,w
   362  0059  00C7               	movwf	main@last_RC_time_backup
   363                           
   364                           ;base_main.c: 124: last_critical_difference = last_RC_time_backup - last_critical_RC_tim
      +                          e;
   365  005A  0941               	comf	_last_critical_RC_time,w
   366  005B  00F4               	movwf	??_main
   367  005C  0942               	comf	_last_critical_RC_time+1,w
   368  005D  00F5               	movwf	??_main+1
   369  005E  0AF4               	incf	??_main,f
   370  005F  1903               	skipnz
   371  0060  0AF5               	incf	??_main+1,f
   372  0061  0847               	movf	main@last_RC_time_backup,w
   373  0062  0774               	addwf	??_main,w
   374  0063  00C5               	movwf	main@last_critical_difference
   375  0064  0848               	movf	main@last_RC_time_backup+1,w
   376  0065  1803               	skipnc
   377  0066  0A48               	incf	main@last_RC_time_backup+1,w
   378  0067  0775               	addwf	??_main+1,w
   379  0068  00C6               	movwf	main@last_critical_difference+1
   380                           
   381                           ;base_main.c: 125: if (last_critical_difference > 2200) {
   382  0069  3008               	movlw	8
   383  006A  0246               	subwf	main@last_critical_difference+1,w
   384  006B  3099               	movlw	153
   385  006C  1903               	skipnz
   386  006D  0245               	subwf	main@last_critical_difference,w
   387  006E  1C03               	skipc
   388  006F  2898               	goto	l743
   389                           
   390                           ;base_main.c: 126: last_critical_RC_time = last_RC_time_backup;
   391  0070  0848               	movf	main@last_RC_time_backup+1,w
   392  0071  00C2               	movwf	_last_critical_RC_time+1
   393  0072  0847               	movf	main@last_RC_time_backup,w
   394  0073  00C1               	movwf	_last_critical_RC_time
   395                           
   396                           ;base_main.c: 127: RC_State = RC_START_RISE;
   397  0074  3002               	movlw	2
   398  0075  2951               	goto	L7
   399  0076                     l64:	
   400                           ;base_main.c: 133: case RC_START_RISE:
   401                           
   402                           ;base_main.c: 130: }
   403                           ;base_main.c: 131: }
   404                           ;base_main.c: 132: break;
   405                           
   406                           ;base_main.c: 129: RC_State = RC_RESET;
   407                           
   408                           ;base_main.c: 128: } else {
   409                           
   410                           
   411                           ;base_main.c: 134: if (last_RC_data == 0) {
   412  0076  1879               	btfsc	_last_RC_data/(0+8),_last_RC_data& (0+7)
   413  0077  2954               	goto	l715
   414                           
   415                           ;base_main.c: 135: last_RC_time_backup = last_RC_time;
   416  0078  084A               	movf	_last_RC_time+1,w
   417  0079  00C8               	movwf	main@last_RC_time_backup+1
   418  007A  0849               	movf	_last_RC_time,w
   419  007B  00C7               	movwf	main@last_RC_time_backup
   420                           
   421                           ;base_main.c: 136: last_critical_difference = last_RC_time_backup - last_critical_RC_tim
      +                          e;
   422  007C  0941               	comf	_last_critical_RC_time,w
   423  007D  00F4               	movwf	??_main
   424  007E  0942               	comf	_last_critical_RC_time+1,w
   425  007F  00F5               	movwf	??_main+1
   426  0080  0AF4               	incf	??_main,f
   427  0081  1903               	skipnz
   428  0082  0AF5               	incf	??_main+1,f
   429  0083  0847               	movf	main@last_RC_time_backup,w
   430  0084  0774               	addwf	??_main,w
   431  0085  00C5               	movwf	main@last_critical_difference
   432  0086  0848               	movf	main@last_RC_time_backup+1,w
   433  0087  1803               	skipnc
   434  0088  0A48               	incf	main@last_RC_time_backup+1,w
   435  0089  0775               	addwf	??_main+1,w
   436  008A  00C6               	movwf	main@last_critical_difference+1
   437                           
   438                           ;base_main.c: 137: if (last_critical_difference > 1000) {
   439  008B  3003               	movlw	3
   440  008C  0246               	subwf	main@last_critical_difference+1,w
   441  008D  30E9               	movlw	233
   442  008E  1903               	skipnz
   443  008F  0245               	subwf	main@last_critical_difference,w
   444  0090  1C03               	skipc
   445  0091  2898               	goto	l743
   446                           
   447                           ;base_main.c: 138: last_critical_RC_time = last_RC_time_backup;
   448  0092  0848               	movf	main@last_RC_time_backup+1,w
   449  0093  00C2               	movwf	_last_critical_RC_time+1
   450  0094  0847               	movf	main@last_RC_time_backup,w
   451  0095  00C1               	movwf	_last_critical_RC_time
   452                           
   453                           ;base_main.c: 139: RC_State = RC_RECV_FALL;
   454  0096  3003               	movlw	3
   455  0097  2951               	goto	L7
   456  0098                     l743:	
   457                           ;base_main.c: 140: } else {
   458                           
   459                           
   460                           ;base_main.c: 141: RC_State = RC_RESET;
   461  0098  01C3               	clrf	_RC_State
   462                           
   463                           ;base_main.c: 142: }
   464                           ;base_main.c: 143: }
   465                           ;base_main.c: 144: break;
   466  0099  2954               	goto	l715
   467  009A                     l68:	
   468                           ;base_main.c: 145: case RC_RECV_FALL:
   469                           
   470                           
   471                           ;base_main.c: 146: if (last_RC_data == 1) {
   472  009A  1C79               	btfss	_last_RC_data/(0+8),_last_RC_data& (0+7)
   473  009B  2954               	goto	l715
   474                           
   475                           ;base_main.c: 147: RC_State = RC_RECV_RISE;
   476  009C  3004               	movlw	4
   477  009D  2951               	goto	L7
   478  009E                     l70:	
   479                           ;base_main.c: 150: case RC_RECV_RISE:
   480                           
   481                           ;base_main.c: 148: }
   482                           ;base_main.c: 149: break;
   483                           
   484                           
   485                           ;base_main.c: 151: if (last_RC_data == 0) {
   486  009E  1879               	btfsc	_last_RC_data/(0+8),_last_RC_data& (0+7)
   487  009F  2954               	goto	l715
   488                           
   489                           ;base_main.c: 152: last_RC_time_backup = last_RC_time;
   490  00A0  084A               	movf	_last_RC_time+1,w
   491  00A1  00C8               	movwf	main@last_RC_time_backup+1
   492  00A2  0849               	movf	_last_RC_time,w
   493  00A3  00C7               	movwf	main@last_RC_time_backup
   494                           
   495                           ;base_main.c: 153: if (RC_index == 32) {
   496  00A4  3020               	movlw	32
   497  00A5  0644               	xorwf	_RC_index,w
   498  00A6  1D03               	btfss	3,2
   499  00A7  28C1               	goto	l759
   500                           
   501                           ;base_main.c: 154: RC_State = RC_CONT_FALL1;
   502  00A8  3005               	movlw	5
   503  00A9  00F4               	movwf	??_main
   504  00AA  0874               	movf	??_main,w
   505  00AB  00C3               	movwf	_RC_State
   506                           
   507                           ;base_main.c: 155: if (last_critical_difference < 375) {
   508  00AC  3001               	movlw	1
   509  00AD  0246               	subwf	main@last_critical_difference+1,w
   510  00AE  3077               	movlw	119
   511  00AF  1903               	skipnz
   512  00B0  0245               	subwf	main@last_critical_difference,w
   513  00B1  1803               	skipnc
   514  00B2  28B9               	goto	l755
   515                           
   516                           ;base_main.c: 156: RC_data[RC_index] = 0;
   517  00B3  0844               	movf	_RC_index,w
   518  00B4  3E20               	addlw	(low (_RC_data| 0))& (0+255)
   519  00B5  0084               	movwf	4
   520  00B6  1383               	bcf	3,7	;select IRP bank0
   521  00B7  0180               	clrf	0
   522                           
   523                           ;base_main.c: 157: } else {
   524  00B8  28BF               	goto	l757
   525  00B9                     l755:	
   526                           
   527                           ;base_main.c: 158: RC_data[RC_index] = 1;
   528  00B9  0844               	movf	_RC_index,w
   529  00BA  3E20               	addlw	(low (_RC_data| 0))& (0+255)
   530  00BB  0084               	movwf	4
   531  00BC  1383               	bcf	3,7	;select IRP bank0
   532  00BD  0180               	clrf	0
   533  00BE  0A80               	incf	0,f
   534  00BF                     l757:	
   535                           
   536                           ;base_main.c: 159: }
   537                           ;base_main.c: 160: RC_data_ready = 1;
   538  00BF  1478               	bsf	_RC_data_ready/(0+8),_RC_data_ready& (0+7)
   539                           
   540                           ;base_main.c: 161: } else {
   541  00C0  2954               	goto	l715
   542  00C1                     l759:	
   543                           
   544                           ;base_main.c: 162: last_critical_difference = last_RC_time_backup - last_critical_RC_tim
      +                          e;
   545  00C1  0941               	comf	_last_critical_RC_time,w
   546  00C2  00F4               	movwf	??_main
   547  00C3  0942               	comf	_last_critical_RC_time+1,w
   548  00C4  00F5               	movwf	??_main+1
   549  00C5  0AF4               	incf	??_main,f
   550  00C6  1903               	skipnz
   551  00C7  0AF5               	incf	??_main+1,f
   552  00C8  0847               	movf	main@last_RC_time_backup,w
   553  00C9  0774               	addwf	??_main,w
   554  00CA  00C5               	movwf	main@last_critical_difference
   555  00CB  0848               	movf	main@last_RC_time_backup+1,w
   556  00CC  1803               	skipnc
   557  00CD  0A48               	incf	main@last_RC_time_backup+1,w
   558  00CE  0775               	addwf	??_main+1,w
   559  00CF  00C6               	movwf	main@last_critical_difference+1
   560                           
   561                           ;base_main.c: 163: if (last_critical_difference < 375) {
   562  00D0  3001               	movlw	1
   563  00D1  0246               	subwf	main@last_critical_difference+1,w
   564  00D2  3077               	movlw	119
   565  00D3  1903               	skipnz
   566  00D4  0245               	subwf	main@last_critical_difference,w
   567  00D5  1803               	skipnc
   568  00D6  28DD               	goto	l765
   569                           
   570                           ;base_main.c: 164: RC_data[RC_index] = 0;
   571  00D7  0844               	movf	_RC_index,w
   572  00D8  3E20               	addlw	(low (_RC_data| 0))& (0+255)
   573  00D9  0084               	movwf	4
   574  00DA  1383               	bcf	3,7	;select IRP bank0
   575  00DB  0180               	clrf	0
   576                           
   577                           ;base_main.c: 165: } else {
   578  00DC  28E3               	goto	l767
   579  00DD                     l765:	
   580                           
   581                           ;base_main.c: 166: RC_data[RC_index] = 1;
   582  00DD  0844               	movf	_RC_index,w
   583  00DE  3E20               	addlw	(low (_RC_data| 0))& (0+255)
   584  00DF  0084               	movwf	4
   585  00E0  1383               	bcf	3,7	;select IRP bank0
   586  00E1  0180               	clrf	0
   587  00E2  0A80               	incf	0,f
   588  00E3                     l767:	
   589                           
   590                           ;base_main.c: 167: }
   591                           ;base_main.c: 168: last_critical_RC_time = last_RC_time_backup;
   592  00E3  0848               	movf	main@last_RC_time_backup+1,w
   593  00E4  00C2               	movwf	_last_critical_RC_time+1
   594  00E5  0847               	movf	main@last_RC_time_backup,w
   595  00E6  00C1               	movwf	_last_critical_RC_time
   596                           
   597                           ;base_main.c: 169: RC_index++;
   598  00E7  3001               	movlw	1
   599  00E8  00F4               	movwf	??_main
   600  00E9  0874               	movf	??_main,w
   601  00EA  07C4               	addwf	_RC_index,f
   602                           
   603                           ;base_main.c: 170: RC_State = RC_RECV_FALL;
   604  00EB  3003               	movlw	3
   605  00EC  00F4               	movwf	??_main
   606  00ED  0874               	movf	??_main,w
   607  00EE  00C3               	movwf	_RC_State
   608  00EF                     l773:	
   609                           
   610                           ;base_main.c: 171: RC_data_ready = 0;
   611  00EF  1078               	bcf	_RC_data_ready/(0+8),_RC_data_ready& (0+7)
   612                           
   613                           ;base_main.c: 172: }
   614                           ;base_main.c: 173: }
   615                           ;base_main.c: 174: break;
   616  00F0  2954               	goto	l715
   617  00F1                     l78:	
   618                           ;base_main.c: 175: case RC_CONT_FALL1:
   619                           
   620                           
   621                           ;base_main.c: 176: if (last_RC_data == 1) {
   622  00F1  1C79               	btfss	_last_RC_data/(0+8),_last_RC_data& (0+7)
   623  00F2  2954               	goto	l715
   624                           
   625                           ;base_main.c: 177: last_RC_time_backup = last_RC_time;
   626  00F3  084A               	movf	_last_RC_time+1,w
   627  00F4  00C8               	movwf	main@last_RC_time_backup+1
   628  00F5  0849               	movf	_last_RC_time,w
   629  00F6  00C7               	movwf	main@last_RC_time_backup
   630                           
   631                           ;base_main.c: 178: last_critical_difference = last_RC_time_backup - last_critical_RC_tim
      +                          e;
   632  00F7  0941               	comf	_last_critical_RC_time,w
   633  00F8  00F4               	movwf	??_main
   634  00F9  0942               	comf	_last_critical_RC_time+1,w
   635  00FA  00F5               	movwf	??_main+1
   636  00FB  0AF4               	incf	??_main,f
   637  00FC  1903               	skipnz
   638  00FD  0AF5               	incf	??_main+1,f
   639  00FE  0847               	movf	main@last_RC_time_backup,w
   640  00FF  0774               	addwf	??_main,w
   641  0100  00C5               	movwf	main@last_critical_difference
   642  0101  0848               	movf	main@last_RC_time_backup+1,w
   643  0102  1803               	skipnc
   644  0103  0A48               	incf	main@last_RC_time_backup+1,w
   645  0104  0775               	addwf	??_main+1,w
   646  0105  00C6               	movwf	main@last_critical_difference+1
   647                           
   648                           ;base_main.c: 179: if (last_critical_difference > 2200) {
   649  0106  3008               	movlw	8
   650  0107  0246               	subwf	main@last_critical_difference+1,w
   651  0108  3099               	movlw	153
   652  0109  1903               	skipnz
   653  010A  0245               	subwf	main@last_critical_difference,w
   654  010B  1C03               	skipc
   655  010C  2948               	goto	L8
   656                           
   657                           ;base_main.c: 180: last_critical_RC_time = last_RC_time_backup;
   658  010D  0848               	movf	main@last_RC_time_backup+1,w
   659  010E  00C2               	movwf	_last_critical_RC_time+1
   660  010F  0847               	movf	main@last_RC_time_backup,w
   661  0110  00C1               	movwf	_last_critical_RC_time
   662                           
   663                           ;base_main.c: 181: RC_State = RC_CONT_RISE1;
   664  0111  3006               	movlw	6
   665  0112  2951               	goto	L7
   666  0113                     l82:	
   667                           ;base_main.c: 187: case RC_CONT_RISE1:
   668                           
   669                           ;base_main.c: 184: }
   670                           ;base_main.c: 185: }
   671                           ;base_main.c: 186: break;
   672                           
   673                           ;base_main.c: 183: RC_State = RC_CONT_RISE2;
   674                           
   675                           ;base_main.c: 182: } else {
   676                           
   677                           
   678                           ;base_main.c: 188: if (last_RC_data == 0) {
   679  0113  1879               	btfsc	_last_RC_data/(0+8),_last_RC_data& (0+7)
   680  0114  2954               	goto	l715
   681                           
   682                           ;base_main.c: 189: last_RC_time_backup = last_RC_time;
   683  0115  084A               	movf	_last_RC_time+1,w
   684  0116  00C8               	movwf	main@last_RC_time_backup+1
   685  0117  0849               	movf	_last_RC_time,w
   686  0118  00C7               	movwf	main@last_RC_time_backup
   687                           
   688                           ;base_main.c: 190: last_critical_difference = last_RC_time_backup - last_critical_RC_tim
      +                          e;
   689  0119  0941               	comf	_last_critical_RC_time,w
   690  011A  00F4               	movwf	??_main
   691  011B  0942               	comf	_last_critical_RC_time+1,w
   692  011C  00F5               	movwf	??_main+1
   693  011D  0AF4               	incf	??_main,f
   694  011E  1903               	skipnz
   695  011F  0AF5               	incf	??_main+1,f
   696  0120  0847               	movf	main@last_RC_time_backup,w
   697  0121  0774               	addwf	??_main,w
   698  0122  00C5               	movwf	main@last_critical_difference
   699  0123  0848               	movf	main@last_RC_time_backup+1,w
   700  0124  1803               	skipnc
   701  0125  0A48               	incf	main@last_RC_time_backup+1,w
   702  0126  0775               	addwf	??_main+1,w
   703  0127  00C6               	movwf	main@last_critical_difference+1
   704                           
   705                           ;base_main.c: 191: if (last_critical_difference > 1000) {
   706  0128  3003               	movlw	3
   707  0129  0246               	subwf	main@last_critical_difference+1,w
   708  012A  30E9               	movlw	233
   709  012B  1903               	skipnz
   710  012C  0245               	subwf	main@last_critical_difference,w
   711  012D  1C03               	skipc
   712  012E  2939               	goto	l795
   713                           
   714                           ;base_main.c: 193: last_critical_RC_time = last_RC_time_backup;
   715  012F  0848               	movf	main@last_RC_time_backup+1,w
   716  0130  00C2               	movwf	_last_critical_RC_time+1
   717  0131  0847               	movf	main@last_RC_time_backup,w
   718  0132  00C1               	movwf	_last_critical_RC_time
   719                           
   720                           ;base_main.c: 194: RC_State = RC_RECV_FALL;
   721  0133  3003               	movlw	3
   722  0134  00F4               	movwf	??_main
   723  0135  0874               	movf	??_main,w
   724  0136  00C3               	movwf	_RC_State
   725                           
   726                           ;base_main.c: 195: RC_index = 0;
   727  0137  01C4               	clrf	_RC_index
   728                           
   729                           ;base_main.c: 196: } else if (last_critical_difference > 500) {
   730  0138  2954               	goto	l715
   731  0139                     l795:	
   732  0139  3001               	movlw	1
   733  013A  0246               	subwf	main@last_critical_difference+1,w
   734  013B  30F5               	movlw	245
   735  013C  1903               	skipnz
   736  013D  0245               	subwf	main@last_critical_difference,w
   737  013E  1C03               	skipc
   738  013F  2954               	goto	l715
   739                           
   740                           ;base_main.c: 198: last_critical_RC_time = last_RC_time_backup;
   741  0140  0848               	movf	main@last_RC_time_backup+1,w
   742  0141  00C2               	movwf	_last_critical_RC_time+1
   743  0142  0847               	movf	main@last_RC_time_backup,w
   744  0143  00C1               	movwf	_last_critical_RC_time
   745                           
   746                           ;base_main.c: 199: RC_State = RC_CONT_FALL2;
   747  0144  3007               	movlw	7
   748  0145  2951               	goto	L7
   749  0146                     l87:	
   750                           ;base_main.c: 203: case RC_CONT_FALL2:
   751                           
   752                           ;base_main.c: 200: }
   753                           ;base_main.c: 201: }
   754                           ;base_main.c: 202: break;
   755                           
   756                           
   757                           ;base_main.c: 204: if (last_RC_data == 1) {
   758  0146  1C79               	btfss	_last_RC_data/(0+8),_last_RC_data& (0+7)
   759  0147  2954               	goto	l715
   760  0148                     L8:	
   761                           
   762                           ;base_main.c: 205: RC_State = RC_CONT_RISE2;
   763  0148  3008               	movlw	8
   764  0149  2951               	goto	L7
   765  014A                     l89:	
   766                           ;base_main.c: 208: case RC_CONT_RISE2:
   767                           
   768                           ;base_main.c: 206: }
   769                           ;base_main.c: 207: break;
   770                           
   771                           
   772                           ;base_main.c: 209: if (last_RC_data == 0) {
   773  014A  1879               	btfsc	_last_RC_data/(0+8),_last_RC_data& (0+7)
   774  014B  2954               	goto	l715
   775                           
   776                           ;base_main.c: 210: last_critical_RC_time = last_RC_time;
   777  014C  084A               	movf	_last_RC_time+1,w
   778  014D  00C2               	movwf	_last_critical_RC_time+1
   779  014E  0849               	movf	_last_RC_time,w
   780  014F  00C1               	movwf	_last_critical_RC_time
   781                           
   782                           ;base_main.c: 211: RC_State = RC_CONT_FALL1;
   783  0150  3005               	movlw	5
   784  0151                     L7:	
   785  0151  00F4               	movwf	??_main
   786  0152  0874               	movf	??_main,w
   787  0153  00C3               	movwf	_RC_State
   788  0154                     l715:	
   789                           ;base_main.c: 90: unsigned int last_critical_difference;
   790                           ;base_main.c: 91: unsigned int last_RC_time_backup;
   791                           ;base_main.c: 93: while (1) {
   792                           
   793                           ;base_main.c: 212: }
   794                           ;base_main.c: 213: }
   795                           
   796                           
   797                           ;base_main.c: 108: if (((signed int) (TMR1 - last_RC_time)) > 27500) {
   798  0154  0949               	comf	_last_RC_time,w
   799  0155  00F4               	movwf	??_main
   800  0156  094A               	comf	_last_RC_time+1,w
   801  0157  00F5               	movwf	??_main+1
   802  0158  0AF4               	incf	??_main,f
   803  0159  1903               	skipnz
   804  015A  0AF5               	incf	??_main+1,f
   805  015B  080E               	movf	14,w	;volatile
   806  015C  0774               	addwf	??_main,w
   807  015D  00F6               	movwf	??_main+2
   808  015E  080F               	movf	15,w	;volatile
   809  015F  1803               	skipnc
   810  0160  0A0F               	incf	15,w	;volatile
   811  0161  0775               	addwf	??_main+1,w
   812  0162  00F7               	movwf	??_main+3
   813  0163  0877               	movf	??_main+3,w
   814  0164  3A80               	xorlw	128
   815  0165  00FF               	movwf	127
   816  0166  30EB               	movlw	235
   817  0167  027F               	subwf	127,w
   818  0168  1D03               	skipz
   819  0169  296C               	goto	u235
   820  016A  306D               	movlw	109
   821  016B  0276               	subwf	??_main+2,w
   822  016C                     u235:	
   823  016C  1803               	btfsc	3,0
   824  016D  2846               	goto	l717
   825  016E  1283               	bcf	3,5	;RP0=0, select bank0
   826  016F  1303               	bcf	3,6	;RP1=0, select bank0
   827  0170  0843               	movf	_RC_State,w
   828                           
   829                           ; Switch size 1, requested type "space"
   830                           ; Number of cases is 9, Range of values is 0 to 8
   831                           ; switch strategies available:
   832                           ; Name         Instructions Cycles
   833                           ; simple_byte           28    15 (average)
   834                           ; direct_byte           35     8 (fixed)
   835                           ; jumptable            260     6 (fixed)
   836                           ;	Chosen strategy is simple_byte
   837  0171  3A00               	xorlw	0	; case 0
   838  0172  1903               	skipnz
   839  0173  284B               	goto	l57
   840  0174  3A01               	xorlw	1	; case 1
   841  0175  1903               	skipnz
   842  0176  2854               	goto	l60
   843  0177  3A03               	xorlw	3	; case 2
   844  0178  1903               	skipnz
   845  0179  2876               	goto	l64
   846  017A  3A01               	xorlw	1	; case 3
   847  017B  1903               	skipnz
   848  017C  289A               	goto	l68
   849  017D  3A07               	xorlw	7	; case 4
   850  017E  1903               	skipnz
   851  017F  289E               	goto	l70
   852  0180  3A01               	xorlw	1	; case 5
   853  0181  1903               	skipnz
   854  0182  28F1               	goto	l78
   855  0183  3A03               	xorlw	3	; case 6
   856  0184  1903               	skipnz
   857  0185  2913               	goto	l82
   858  0186  3A01               	xorlw	1	; case 7
   859  0187  1903               	skipnz
   860  0188  2946               	goto	l87
   861  0189  3A0F               	xorlw	15	; case 8
   862  018A  1903               	skipnz
   863  018B  294A               	goto	l89
   864  018C  2954               	goto	l715
   865  018D  2954               	goto	l715
   866  018E                     __end_of_main:	
   867                           
   868                           	psect	text1
   869  018E                     __ptext1:	
   870 ;; *************** function _interrupt_handler *****************
   871 ;; Defined at:
   872 ;;		line 218 in file "base_main.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;		None
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   886 ;;      Params:         0       0       0       0       0
   887 ;;      Locals:         0       0       0       0       0
   888 ;;      Temps:          4       0       0       0       0
   889 ;;      Totals:         4       0       0       0       0
   890 ;;Total ram usage:        4 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		Interrupt level 1
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           
   900                           ;psect for function _interrupt_handler
   901  018E                     _interrupt_handler:	
   902                           
   903                           ;base_main.c: 219: if (RBIF == 1) {
   904  018E  1C0B               	btfss	11,0	;volatile
   905  018F  2998               	goto	i1l97
   906                           
   907                           ;base_main.c: 220: last_RC_time = TMR1;
   908  0190  080F               	movf	15,w	;volatile
   909  0191  00CA               	movwf	_last_RC_time+1
   910  0192  080E               	movf	14,w	;volatile
   911  0193  00C9               	movwf	_last_RC_time
   912                           
   913                           ;base_main.c: 221: last_RC_data = RB2;
   914  0194  1079               	bcf	_last_RC_data/(0+8),_last_RC_data& (0+7)
   915  0195  1906               	btfsc	6,2	;volatile
   916  0196  1479               	bsf	_last_RC_data/(0+8),_last_RC_data& (0+7)
   917                           
   918                           ;base_main.c: 222: RBIF = 0;
   919  0197  100B               	bcf	11,0	;volatile
   920  0198                     i1l97:	
   921  0198  0873               	movf	??_interrupt_handler+3,w
   922  0199  1283               	bcf	3,5	;RP0=0, select bank0
   923  019A  1303               	bcf	3,6	;RP1=0, select bank0
   924  019B  00FF               	movwf	127
   925  019C  0872               	movf	??_interrupt_handler+2,w
   926  019D  008A               	movwf	10
   927  019E  0871               	movf	??_interrupt_handler+1,w
   928  019F  0084               	movwf	4
   929  01A0  0E70               	swapf	??_interrupt_handler^(0+-128),w
   930  01A1  0083               	movwf	3
   931  01A2  0EFE               	swapf	126,f
   932  01A3  0E7E               	swapf	126,w
   933  01A4  0009               	retfie
   934  01A5                     __end_of_interrupt_handler:	
   935  007E                     btemp	set	126	;btemp
   936  007E                     wtemp	set	126
   937  007E                     wtemp0	set	126
   938  0080                     wtemp1	set	128
   939  0082                     wtemp2	set	130
   940  0084                     wtemp3	set	132
   941  0086                     wtemp4	set	134
   942  0088                     wtemp5	set	136
   943  007F                     wtemp6	set	127
   944  007E                     ttemp	set	126
   945  007E                     ttemp0	set	126
   946  0081                     ttemp1	set	129
   947  0084                     ttemp2	set	132
   948  0087                     ttemp3	set	135
   949  007F                     ttemp4	set	127
   950  007E                     ltemp	set	126
   951  007E                     ltemp0	set	126
   952  0082                     ltemp1	set	130
   953  0086                     ltemp2	set	134
   954  0080                     ltemp3	set	128
   955                           
   956                           	psect	intentry
   957  0004                     __pintentry:	
   958                           ;incstack = 0
   959                           ; Regs used in _interrupt_handler: [wreg]
   960                           
   961  0004                     interrupt_function:	
   962  007E                     saved_w	set	btemp
   963  0004  00FE               	movwf	btemp
   964  0005  0E03               	swapf	3,w
   965  0006  00F0               	movwf	??_interrupt_handler
   966  0007  0804               	movf	4,w
   967  0008  00F1               	movwf	??_interrupt_handler+1
   968  0009  080A               	movf	10,w
   969  000A  00F2               	movwf	??_interrupt_handler+2
   970  000B  1283               	bcf	3,5	;RP0=0, select bank0
   971  000C  1303               	bcf	3,6	;RP1=0, select bank0
   972  000D  087F               	movf	btemp+1,w
   973  000E  00F3               	movwf	??_interrupt_handler+3
   974  000F  120A  118A  298E   	ljmp	_interrupt_handler


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         37
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      4      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0     406
                                              4 COMMON     4     4      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _interrupt_handler                                    4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _interrupt_handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       2       0       14.3%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      35       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      2B       5       53.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      35      12        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue May 10 21:54:38 2016

               _RC_data_ready 03C0                   __CFG_CP$OFF 0000                            l60 0054  
                          l70 009E                            l64 0076                            l57 004B  
                          l82 0113                            l68 009A                            l78 00F1  
                          l87 0146                            l89 014A                            fsr 0004  
                         l715 0154                           l717 0046                           l743 0098  
                         l755 00B9                           l773 00EF                           l765 00DD  
                         l757 00BF                           l767 00E3                           l759 00C1  
                         l795 0139                           _GIE 005F                           _RB2 0032  
                         u235 016C                  __CFG_CPD$OFF 0000                           fsr0 0004  
                         indf 0000                  __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000  
                        _ANS8 0C48                          _RBIE 005B                          _RBIF 0058  
                        i1l97 0198                          _TMR1 000E                  __CFG_WRT$OFF 0000  
                        _main 0021                          _mode 03C1                          btemp 007E  
                        ltemp 007E                          start 0012                          ttemp 007E  
                        wtemp 007E                 __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000  
     main@last_RC_time_backup 0047                         ?_main 0070                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188                         _IOCB2 04B2                         _TRISA 0085  
              __CFG_FCMEN$OFF 0000                         _nRBPU 040F                __pbitbssCOMMON 03C0  
              __CFG_BOREN$OFF 0000                         pclath 000A                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __initialization 0015                  __end_of_main 018E  
                      ??_main 0074                        _ANSELH 0189                        _TMR1GE 0086  
                      _TMR1CS 0081                        _TMR1ON 0080                        _TRISB2 0432  
              __CFG_PWRTE$OFF 0000                        saved_w 007E         _last_critical_RC_time 0041  
     __end_of__initialization 001D                __pcstackCOMMON 0070                    __pbssBANK0 0020  
                  __pmaintext 0021  main@last_critical_difference 0045                    __pintentry 0004  
                     _T1CKPS0 0084                       _T1CKPS1 0085                       _RC_data 0020  
                     __ptext1 018E                       clrloop0 01A6          end_of_initialization 001D  
               __pbitnvCOMMON 03C8           start_initialization 0015                  _last_RC_data 03C8  
                _last_RC_time 0049                     ___latbits 0002                 __pcstackBANK0 0045  
                   __pnvBANK0 0049             _interrupt_handler 018E            ?_interrupt_handler 0070  
         ??_interrupt_handler 0070             interrupt_function 0004                     clear_ram0 01A5  
                    _RC_State 0043     __end_of_interrupt_handler 01A5                      _RC_index 0044  
           __CFG_BOR4V$BOR21V 0000                 __size_of_main 016D    __size_of_interrupt_handler 0017  
                    intlevel1 0000  
